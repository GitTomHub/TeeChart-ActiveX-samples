<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ToolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="TChart1.OcxState" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACFTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5BeEhvc3QrU3RhdGUBAAAABERhdGEHAgIAAAAJAwAAAA8DAAAAswsAAAIB
        AAAAAQAAAAAAAAAAAAAAAJ4LAABUUEYwC1RDaGFydENoYXJ0AARMZWZ0AgADVG9wAgAFV2lkdGgDhgQG
        SGVpZ2h0A+0BIUJhY2tXYWxsLkJydXNoLkdyYWRpZW50LkRpcmVjdGlvbgcLZ2RCb3R0b21Ub3AgQmFj
        a1dhbGwuQnJ1c2guR3JhZGllbnQuRW5kQ29sb3IHB2NsV2hpdGUiQmFja1dhbGwuQnJ1c2guR3JhZGll
        bnQuU3RhcnRDb2xvcgTq6uoAFEJhY2tXYWxsLlRyYW5zcGFyZW50CA9Gb290LkZvbnQuQ29sb3IHBmNs
        Qmx1ZRJHcmFkaWVudC5EaXJlY3Rpb24HC2dkQm90dG9tVG9wEUdyYWRpZW50LkVuZENvbG9yBwdjbFdo
        aXRlEUdyYWRpZW50Lk1pZENvbG9yBOrq6gATR3JhZGllbnQuU3RhcnRDb2xvcgTq6uoAEEdyYWRpZW50
        LlZpc2libGUIDkxlZnRXYWxsLkNvbG9yBP//4AAPUmlnaHRXYWxsLkNvbG9yBP//4AAQVGl0bGUuRm9u
        dC5Db2xvcgcGY2xHcmF5EVRpdGxlLkZvbnQuSGVpZ2h0AvASVGl0bGUuVGV4dC5TdHJpbmdzAQY5VXNp
        bmcgRmFzdCBMaW5lICJBZGQgUmVhbFRpbWUiIGZvciBhdXRvIGF4aXMgZGlzcGxhY2VtZW50ABVCb3R0
        b21BeGlzLkF4aXMuQ29sb3IEQEBAABVCb3R0b21BeGlzLkdyaWQuQ29sb3IEqampABdCb3R0b21BeGlz
        LkdyaWQuVmlzaWJsZQgiQm90dG9tQXhpcy5MYWJlbHNGb3JtYXQuRm9udC5Db2xvcgcGY2xHcmF5I0Jv
        dHRvbUF4aXMuTGFiZWxzRm9ybWF0LkZvbnQuSGVpZ2h0AvMdQm90dG9tQXhpcy5NaW5vclRpY2tzLlZp
        c2libGUIG0JvdHRvbUF4aXMuVGlja3NJbm5lci5Db2xvcgSpqakAG0JvdHRvbUF4aXMuVGl0bGUuRm9u
        dC5Db2xvcgRAQEAAHEJvdHRvbUF4aXMuVGl0bGUuRm9udC5IZWlnaHQC8RREZXB0aEF4aXMuQXhpcy5D
        b2xvcgRAQEAAFERlcHRoQXhpcy5HcmlkLkNvbG9yBKmpqQAhRGVwdGhBeGlzLkxhYmVsc0Zvcm1hdC5G
        b250LkNvbG9yBwZjbEdyYXkiRGVwdGhBeGlzLkxhYmVsc0Zvcm1hdC5Gb250LkhlaWdodALzHERlcHRo
        QXhpcy5NaW5vclRpY2tzLlZpc2libGUIGkRlcHRoQXhpcy5UaWNrc0lubmVyLkNvbG9yBKmpqQAaRGVw
        dGhBeGlzLlRpdGxlLkZvbnQuQ29sb3IEQEBAABtEZXB0aEF4aXMuVGl0bGUuRm9udC5IZWlnaHQC8RdE
        ZXB0aFRvcEF4aXMuQXhpcy5Db2xvcgRAQEAAF0RlcHRoVG9wQXhpcy5HcmlkLkNvbG9yBKmpqQAkRGVw
        dGhUb3BBeGlzLkxhYmVsc0Zvcm1hdC5Gb250LkNvbG9yBwZjbEdyYXklRGVwdGhUb3BBeGlzLkxhYmVs
        c0Zvcm1hdC5Gb250LkhlaWdodALzH0RlcHRoVG9wQXhpcy5NaW5vclRpY2tzLlZpc2libGUIHURlcHRo
        VG9wQXhpcy5UaWNrc0lubmVyLkNvbG9yBKmpqQAdRGVwdGhUb3BBeGlzLlRpdGxlLkZvbnQuQ29sb3IE
        QEBAAB5EZXB0aFRvcEF4aXMuVGl0bGUuRm9udC5IZWlnaHQC8RNMZWZ0QXhpcy5BeGlzLkNvbG9yBEBA
        QAAVTGVmdEF4aXMuQXhpcy5WaXNpYmxlCBNMZWZ0QXhpcy5HcmlkLkNvbG9yBKmpqQAgTGVmdEF4aXMu
        TGFiZWxzRm9ybWF0LkZvbnQuQ29sb3IHBmNsR3JheSFMZWZ0QXhpcy5MYWJlbHNGb3JtYXQuRm9udC5I
        ZWlnaHQC8xtMZWZ0QXhpcy5NaW5vclRpY2tzLlZpc2libGUIGUxlZnRBeGlzLlRpY2tzSW5uZXIuQ29s
        b3IEqampABlMZWZ0QXhpcy5UaXRsZS5Gb250LkNvbG9yBEBAQAAaTGVmdEF4aXMuVGl0bGUuRm9udC5I
        ZWlnaHQC8RFMZWdlbmQuRm9udC5Db2xvcgRAQEAAEkxlZ2VuZC5Gb250LkhlaWdodALzFExlZ2VuZC5G
        cmFtZS5WaXNpYmxlCBpMZWdlbmQuU2hhZG93LlRyYW5zcGFyZW5jeQIAFkxlZ2VuZC5UaXRsZS5Gb250
        Lk5hbWUGBUFyaWFsEkxlZ2VuZC5UcmFuc3BhcmVudAkUUmlnaHRBeGlzLkF4aXMuQ29sb3IEQEBAABRS
        aWdodEF4aXMuR3JpZC5Db2xvcgSpqakAIVJpZ2h0QXhpcy5MYWJlbHNGb3JtYXQuRm9udC5Db2xvcgcG
        Y2xHcmF5IlJpZ2h0QXhpcy5MYWJlbHNGb3JtYXQuRm9udC5IZWlnaHQC8xxSaWdodEF4aXMuTWlub3JU
        aWNrcy5WaXNpYmxlCBpSaWdodEF4aXMuVGlja3NJbm5lci5Db2xvcgSpqakAGlJpZ2h0QXhpcy5UaXRs
        ZS5Gb250LkNvbG9yBEBAQAAbUmlnaHRBeGlzLlRpdGxlLkZvbnQuSGVpZ2h0AvESVG9wQXhpcy5BeGlz
        LkNvbG9yBEBAQAASVG9wQXhpcy5HcmlkLkNvbG9yBKmpqQAfVG9wQXhpcy5MYWJlbHNGb3JtYXQuRm9u
        dC5Db2xvcgcGY2xHcmF5IFRvcEF4aXMuTGFiZWxzRm9ybWF0LkZvbnQuSGVpZ2h0AvMaVG9wQXhpcy5N
        aW5vclRpY2tzLlZpc2libGUIGFRvcEF4aXMuVGlja3NJbm5lci5Db2xvcgSpqakAGFRvcEF4aXMuVGl0
        bGUuRm9udC5Db2xvcgRAQEAAGVRvcEF4aXMuVGl0bGUuRm9udC5IZWlnaHQC8QZWaWV3M0QIC1ZpZXcz
        RFdhbGxzCAVDb2xvcgcHY2xXaGl0ZQ1EZWZhdWx0Q2FudmFzBg5UR0RJUGx1c0NhbnZhcxFDb2xvclBh
        bGV0dGVJbmRleAL+DENvbG9yUGFsZXR0ZQEEd5nWAAT/z2gABP9/RwAEgcrbAARec54ABFCulgAE5jtB
        AAT/85AABJDq0QAEo6OjAAT//8AABOfn5wAAAA9URmFzdExpbmVTZXJpZXMHU2VyaWVzMQxIb3ZlckVs
        ZW1lbnQLABZTZWxlY3RlZC5Ib3Zlci5WaXNpYmxlCRFNYXJrcy5CcnVzaC5Db2xvcgT/z2gAD01hcmtz
        LlJvdW5kU2l6ZQIAFE1hcmtzLlNoYWRvdy5WaXNpYmxlCA1MaW5lUGVuLkNvbG9yBHeZ1gAQTGluZVBl
        bi5FbmRTdHlsZQcHZXNSb3VuZApUcmVhdE51bGxzBwt0bkRvbnRQYWludAxYVmFsdWVzLk5hbWUGAVgN
        WFZhbHVlcy5PcmRlcgcLbG9Bc2NlbmRpbmcMWVZhbHVlcy5OYW1lBgFZDVlWYWx1ZXMuT3JkZXIHBmxv
        Tm9uZQAAD1RGYXN0TGluZVNlcmllcwdTZXJpZXMyDEhvdmVyRWxlbWVudAsAFlNlbGVjdGVkLkhvdmVy
        LlZpc2libGUJEU1hcmtzLkJydXNoLkNvbG9yBP9/RwAPTWFya3MuUm91bmRTaXplAgAUTWFya3MuU2hh
        ZG93LlZpc2libGUIDUxpbmVQZW4uQ29sb3IE/89oABBMaW5lUGVuLkVuZFN0eWxlBwdlc1JvdW5kClRy
        ZWF0TnVsbHMHC3RuRG9udFBhaW50DFhWYWx1ZXMuTmFtZQYBWA1YVmFsdWVzLk9yZGVyBwtsb0FzY2Vu
        ZGluZwxZVmFsdWVzLk5hbWUGAVkNWVZhbHVlcy5PcmRlcgcGbG9Ob25lAAAAAAAAAAL/////Cw==
</value>
  </data>
</root>